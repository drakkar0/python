from telethon.sync import TelegramClient, events
import time
import re
from pathlib import Path
import sqlite3


DB_NAME = "Telegram/listener.db"

with sqlite3.connect(DB_NAME) as db:
    sql_request = """CREATE TABLE IF NOT EXISTS message_from_tg (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    chat_id INTEGER,
    chat_name TEXT,
    user_name TEXT,
    user_phone TEXT,
    message TEXT);
    """
    db.execute(sql_request)

def add_row_to_sql(values_tuple):
    try:
        with sqlite3.connect(DB_NAME) as db:
            sql_request = "INSERT INTO message_from_tg (user_id, chat_id, chat_name, user_name,user_phone, message) VALUES(?,?,?,?,?,?)"
            db.execute(sql_request, values_tuple)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


session = Path

# –∏—â–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –≤ –∏–Ω–≤–µ–±
def find_the_number(text):
    match = re.search(r'#(\d+)', text)
    request_number = match.group(1)
    return request_number


api_id = 29305848
api_hash = '649204b0999cf6dd7c29309184c48222'


# client = TelegramClient('session_name', api_id, api_hash)
# client.start()

# #print all chats name
# for dialog in client.iter_dialogs():
#     print(dialog.name, 'has ID', dialog.id, dialog.username)
key_word = ['—Å–∞–π—Ç', '–¥–æ—Ä–æ–±–∏—Ç–∏ —Å–∞–π—Ç', '—Ä–æ–∑—Ä–æ–±–∏—Ç–∏ —Å–∞–π—Ç', 'opencart',
            'wordpress', '—Ä–µ–¥–∏–∑–∞–π–Ω', '—ñ—Å–Ω—É—é—á–æ–≥–æ —Å–∞–π—Ç—É', '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏', '—Ä–µ–¥–∏–∑–∞–π–Ω', '—á–∞—Ç-–±–æ—Ç',
            '—Å–¥–µ–ª–∞—Ç—å –±–æ—Ç', '–∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç—ã', '–í–æ—Ä–¥–ø–µ—Ä–µ—Å']

stop_words = ['–º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏', '–∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è', '–º–∏ —Ä–æ–±–∏–º–æ', '–ì–æ—Ç–æ–≤—ñ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏', '—è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å', '—Å–¥–µ–ª–∞—é', '—Å–¥–µ–ª–∞–µ–º',
              '–∑–∞–π–º–∞—î–º–æ—Å—è', '–ø—ñ–¥–ø—ñ—à—ñ—Ç—å', '–ø—ñ–¥–ø–∏—à–∏—Ç—å', '–ø—ñ–¥–ø–∏—à—ñ—Ç—å']

message_to_client = """
–í—ñ—Ç–∞—é, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –î–º–∏—Ç—Ä–æ.  üëã
–Ø –±—ñ–ª—å—à–µ 15 —Ä–æ–∫—ñ–≤ –∑–∞–π–º–∞—é—Å—å —Ä–æ–∑—Ä–æ–±–∫–æ—é —Å–∞–π—Ç—ñ–≤. –ú–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à –ø—Ä–æ–µ–∫—Ç?üôè

"""


client = TelegramClient('session_name', api_id, api_hash)


@client.on(events.NewMessage)
async def my_event_handler(event):
    
    if event.is_group:
        incoming_text = event.raw_text.lower()
        chat_name = await event.get_chat()
        sender = await event.get_sender() # –ø–æ–ª—É—á–∞–µ–º –∏–º—è —é–∑–µ—Ä–∞
         
        if any(stop_word in incoming_text for stop_word in stop_words):
            return

        for key in key_word:
            if '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏'.lower() in incoming_text:
                time.sleep(2)
                data_tobd = (event.message.sender_id,
                    event.chat_id,
                    chat_name.title if chat_name.title else "None" ,
                    sender.username if sender.username else "None" ,
                    sender.phone if sender.phone else "None" ,
                    incoming_text)
                add_row_to_sql(data_tobd)
                await client.send_message(event.message.sender_id, '–ü—Ä–∏–≤–µ—Ç. #' + find_the_number(incoming_text))
                break
            elif key.lower() in incoming_text:
                data_tobd = (event.message.sender_id,
                    event.chat_id,
                    chat_name.title if chat_name.title else "None" ,
                    sender.username if sender.username else "None" ,
                    sender.phone if sender.phone else "None" ,
                    incoming_text)
                add_row_to_sql(data_tobd)
                
                time.sleep(3)
                
                # await client.send_message(event.chat_id, message_to_client) #–≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —É —á–∞—Ç
                await client.send_message(event.message.sender_id, message_to_client)
                break


client.start()
client.run_until_disconnected()
